openapi: 3.0.0
info:
  title: Route Rangers API
  version: 1.0.0
  description: This is the API documentation for the Route Rangers application.
  contact:
    name: Csaba Vadasz
    email: csabavadasz79@gmail.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8080
    description: local development server
tags:
  - name: welcome
    description: Welcome message
  - name: user
    description: User management
  - name: address
    description: Address management

paths:
  /auth/address:
    get:
      summary: Get all addresses
      description: Retrieve all addresses with their details, including latitude and longitude.
      operationId: renderAllAddress
      x-interface-name: AddressApi
      tags:
        - address
      responses:
        '200':
          description: A list of all addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AddressModel'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Address not found
        '405':
          description: Validation exception

    post:
      summary: Create a new address
      description: Add a new address with latitude and longitude information.
      operationId: createAddress
      x-interface-name: AddressApi
      tags:
        - address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressCreateModel'
      responses:
        '201':
          description: Address created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressModel'
        '400':
          description: Invalid input data

  /auth/address/{addressId}:
    get:
      summary: Get address by ID
      description: Retrieve address details including latitude and longitude by the address UUID.
      operationId: renderAddressById
      x-interface-name: AddressApi
      tags:
        - address
      parameters:
        - name: addressId
          in: path
          required: true
          description: The UUID of the address to retrieve.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response with address details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressModel'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Address not found
        '405':
          description: Validation exception

  /auth/users:
    x-ignore: true
    get:
      summary: Render all users
      operationId: renderAllUsers
      x-interface-name: UserApi
      tags:
        - user
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserModel'

    post:
      x-interface-name: UserApi
      summary: Create a new user
      operationId: createUser
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationModel'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
        '404':
          description: Bad request

  /welcome:
    get:
      summary: Welcome message
      operationId: welcomeMessage
      tags:
        - welcome
      responses:
        '200':
          description: A welcome message
          content:
            application/json:
              schema:
                type: string
                example: "Welcome to Route Rangers API"

components:
  schemas:
    AddressModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier (UUID) of the address.
        street:
          type: string
          description: Street name of the address.
        houseNumber:
          type: string
          description: House number of the address.
        city:
          type: string
          description: City where the address is located.
        postalCode:
          type: string
          description: Postal code of the address.
        country:
          type: string
          description: Country of the address.
        latitude:
          type: number
          format: double
          description: Latitude of the address.
        longitude:
          type: number
          format: double
          description: Longitude of the address.

    AddressCreateModel:
      type: object
      properties:
        street:
          type: string
          description: Street name of the address.
        houseNumber:
          type: string
          description: House number of the address.
        city:
          type: string
          description: City where the address is located.
        postalCode:
          type: string
          description: Postal code of the address.
        country:
          type: string
          description: Country of the address.
        streetType:
          $ref: '#/components/schemas/StreetTypeModel'
        otherStreetType:
          type: string
          description: Please specify if 'other' is selected.
          nullable: true

    StreetTypeModel:
      type: string
      enum:
        - ROAD
        - STREET
        - SQUARE
        - AVENUE
        - BOULEVARD
        - MAIN_SQUARE
        - PROMENADE
        - ROW
        - BANK
        - GARDEN
        - ALLEY
        - PUBLIC_PLACE
        - DRAIN
        - CIRCLE
        - BLOCK
        - FARM
        - PLOT
        - VILLAGE_END
        - OUTER
        - BRIDGE
        - PATH
        - CITY
        - CENTER
        - GREENERY
        - RESORT
        - NICH
        - STOP
        - DOG_PARK
        - UNDERPASS
        - OVERPASS
        - TRAFFIC_PATH
        - SELF_SUPPLY
        - OTHER

    UserRegistrationModel:
      type: object
      properties:
        email:
          type: string
          format: email
          example: csabavadasz79@gmail.com
        password:
          type: string
          example: "password"
        repeatPassword:
          type: string
          example: "password"
      required:
        - email
        - password
        - repeatPassword

    UserModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          example: johndoe@example.com
